import telebot
import random
import config
from telebot import types
import json

bot = telebot.TeleBot(config.token)

croco_players = {}


def start_user_to_game(message):
	try:
		player = message.text.split()
		croco_players[message.chat.id] = player
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–æ", callback_data="Croco"))
		bot.send_message(message.chat.id, f"–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, —É—á–∞–≤—Å—Ç–≤—É–µ—Ç {len(player)} –∏–≥—Ä–æ–∫–æ–≤", reply_markup=keyboard)
	except:
		bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")


@bot.message_handler(commands=["start"])
def start(message):
	markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

	item1 = types.KeyboardButton("–Ø –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ... ü§´")
	item2 = types.KeyboardButton("–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ ü§°")
	item3 = types.KeyboardButton("–ö—Ä–æ–∫–æ–¥–∏–ª üêä")
	item4 = types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä")
	markup.add(item1, item2, item3, item4)
	bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ï–≤–ª–∞–º–ø–∏–π, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É", reply_markup=markup)


@bot.message_handler(content_types=["text"])
def bot_message(message):
	if message.text == "–Ø –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ... ü§´":
		with open("words.txt", "r", encoding="utf-8") as file:
			lines = [line.rstrip() for line in file]
		keyboard = types.InlineKeyboardMarkup()  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
		key_yes = types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–π —Ñ–∞–∫—Ç üôà', callback_data='–§–∞–∫—Ç')  # –∫–Ω–æ–ø–∫–∞ ¬´–î–∞¬ª
		keyboard.add(key_yes)

		bot.send_message(message.chat.id, lines[random.randint(0, len(lines) - 1)], reply_markup=keyboard)

		with open("data.json", "r") as file:
			data = json.load(file)
		if str(message.chat.id) in data:
			data[str(message.chat.id)]['never'] += 1
		else:
			data[str(message.chat.id)] = {"never": 0, "truth": 0, "action": 0, "croco": 0}
			data[str(message.chat.id)]['never'] += 1
		with open("data.json", "w") as file:
			json.dump(data, file)

	if message.text == "–ö—Ä–æ–∫–æ–¥–∏–ª üêä":
		bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ò–≤–∞–Ω –ê–Ω–Ω–∞ –ê–ª–µ–∫—Å–µ–π)')
		bot.register_next_step_handler_by_chat_id(message.chat.id, start_user_to_game)

	if message.text == "–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ ü§°":
		keyboard = types.InlineKeyboardMarkup()
		key_new = types.InlineKeyboardButton(text='–ü—Ä–∞–≤–¥–∞ üí¨', callback_data='–ü—Ä–∞–≤–¥–∞')
		keyboard.add(key_new)
		key_pass = types.InlineKeyboardButton(text='–î–µ–π—Å—Ç–≤–∏–µ ‚úã', callback_data="–î–µ–π—Å—Ç–≤–∏–µ")
		keyboard.add(key_pass)

		bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–≥—Ä—ã", reply_markup=keyboard)

	if message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä":
		with open("data.json", "r") as file:
			data = json.load(file)
		if str(message.chat.id) in data:
			text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–Ø –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ: {data[str(message.chat.id)]['never']}\n" \
				   f"–û—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–¥—É: {data[str(message.chat.id)]['truth']}\n" \
				   f"–í—ã–±—Ä–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ: {data[str(message.chat.id)]['action']}\n" \
				   f"–û—Ç–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤ –≤ –∫—Ä–æ–∫–æ–¥–∏–ª–µ: {data[str(message.chat.id)]['croco']}"

		else:
			data[str(message.chat.id)] = {"never": 0, "truth": 0, "action": 0, "croco": 0}

			text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–Ø –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ: {data[str(message.chat.id)]['never']}\n" \
				   f"–û—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–¥—É: {data[str(message.chat.id)]['truth']}\n" \
				   f"–í—ã–±—Ä–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ: {data[str(message.chat.id)]['action']}\n" \
				   f"–û—Ç–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤ –≤ –∫—Ä–æ–∫–æ–¥–∏–ª–µ: {data[str(message.chat.id)]['croco']}"

		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text="–û–±–Ω—É–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∫—É", callback_data="Reload"))

		bot.send_message(message.chat.id, text, reply_markup=keyboard)
		with open("data.json", "w") as file:
			json.dump(data, file)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
	if call.data == "–§–∞–∫—Ç":
		with open("words.txt", "r", encoding="utf-8") as file:
			lines = [line.rstrip() for line in file]
		keyboard = types.InlineKeyboardMarkup()  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
		key_yes = types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–π —Ñ–∞–∫—Ç üôà', callback_data='–§–∞–∫—Ç')  # –∫–Ω–æ–ø–∫–∞ ¬´–î–∞¬ª
		keyboard.add(key_yes)

		bot.send_message(call.message.chat.id, lines[random.randint(0, len(lines) - 1)], reply_markup=keyboard)

		with open("data.json", "r") as file:
			data = json.load(file)
		if str(call.message.chat.id) in data:
			data[str(call.message.chat.id)]['never'] += 1
		else:
			data[str(call.message.chat.id)] = {"never": 0, "truth": 0, "action": 0, "croco": 0}
			data[str(call.message.chat.id)]['never'] += 1
		with open("data.json", "w") as file:
			json.dump(data, file)

	if call.data == "–ü—Ä–∞–≤–¥–∞":
		with open("true.txt", "r", encoding="utf-8") as file:
			lines = [line.rstrip() for line in file]
		keyboard = types.InlineKeyboardMarkup()
		key_new = types.InlineKeyboardButton(text='–ü—Ä–∞–≤–¥–∞ üí¨', callback_data='–ü—Ä–∞–≤–¥–∞')
		keyboard.add(key_new)
		key_pass = types.InlineKeyboardButton(text='–î–µ–π—Å—Ç–≤–∏–µ ‚úã', callback_data="–î–µ–π—Å—Ç–≤–∏–µ")
		keyboard.add(key_pass)

		bot.send_message(call.message.chat.id, lines[random.randint(0, len(lines) - 1)], reply_markup=keyboard)

		with open("data.json", "r") as file:
			data = json.load(file)
		if str(call.message.chat.id) in data:
			data[str(call.message.chat.id)]['truth'] += 1
		else:
			data[str(call.message.chat.id)] = {"never": 0, "truth": 0, "action": 0, "croco": 0}
			data[str(call.message.chat.id)]['truth'] += 1
		with open("data.json", "w") as file:
			json.dump(data, file)

	if call.data == "–î–µ–π—Å—Ç–≤–∏–µ":
		with open("action.txt", "r", encoding="utf-8") as file:
			lines = [line.rstrip() for line in file]
		keyboard = types.InlineKeyboardMarkup()
		key_new = types.InlineKeyboardButton(text='–ü—Ä–∞–≤–¥–∞ üí¨', callback_data='–ü—Ä–∞–≤–¥–∞')
		keyboard.add(key_new)
		key_pass = types.InlineKeyboardButton(text='–î–µ–π—Å—Ç–≤–∏–µ ‚úã', callback_data="–î–µ–π—Å—Ç–≤–∏–µ")
		keyboard.add(key_pass)

		bot.send_message(call.message.chat.id, lines[random.randint(0, len(lines) - 1)], reply_markup=keyboard)

		with open("data.json", "r") as file:
			data = json.load(file)
		if str(call.message.chat.id) in data:
			data[str(call.message.chat.id)]['action'] += 1
		else:
			data[str(call.message.chat.id)] = {"never": 0, "truth": 0, "action": 0, "croco": 0}
			data[str(call.message.chat.id)]['action'] += 1
		with open("data.json", "w") as file:
			json.dump(data, file)

	if call.data == "Croco":
		try:
			player = croco_players[call.message.chat.id]
			if len(player) > 1:
				bot.send_message(call.message.chat.id, f"–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–∫ {player[random.randint(0, len(player) - 1)]}")
				with open("croco.txt", "r", encoding="utf-8") as file:
					lines = [line.rstrip() for line in file]
				keyboard = types.InlineKeyboardMarkup()
				keyboard.add(types.InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–æ", callback_data="Croco"))

				bot.send_message(call.message.chat.id, f"–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {lines[random.randint(0, len(lines) - 1)]}", reply_markup=keyboard)

				with open("data.json", "r") as file:
					data = json.load(file)
				if str(call.message.chat.id) in data:
					data[str(call.message.chat.id)]['croco'] += 1
				else:
					data[str(call.message.chat.id)] = {"never": 0, "truth": 0, "action": 0, "croco": 0}
					data[str(call.message.chat.id)]['croco'] += 1
				with open("data.json", "w") as file:
					json.dump(data, file)

			else:
				bot.send_message(call.message.chat.id, "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞")
				return

		except:
			bot.send_message(call.message.chat.id, "–î–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã")
			return

	if call.data == "Reload":
		with open("data.json", "r") as file:
			data = json.load(file)
		data[str(call.message.chat.id)] = {"never": 0, "truth": 0, "action": 0, "croco": 0}
		with open("data.json", "w") as file:
			json.dump(data, file)
		bot.send_message(call.message.chat.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω–∞")
	if call.data == "Menu":
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

		item1 = types.KeyboardButton("–Ø –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ...")
		item2 = types.KeyboardButton("–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ")
		item3 = types.KeyboardButton("–ö—Ä–æ–∫–æ–¥–∏–ª üêä")

		markup.add(item1, item2, item3)
		bot.send_message(call.message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É", reply_markup=markup)


#
# def create_game_croco(message):
# 	try:
# 		count = int(message.text)
# 		print(message.chat.id)
# 		data = {str(message.chat.id): {1: 0}}
# 		for i in range(1, count):
# 			data[str(message.chat.id)].update({i+1: 0})
# 		print(data)
# 		with open('data.json', 'a+') as f:
# 			try:
# 				json_data = json.load(f)
# 				json_data.write(data)
# 			except:
# 				json_data.write(data)
# 		start_user_to_game(message)
# 	except:
# 		print("Error")


bot.polling(none_stop=True)
